" let g:tim_plugin_groups = []
" let g:override_tim_plugins = 1

" autocomplete {
  if count(g:tim_plugin_groups, 'autocomplete')
    if isdirectory(expand("~/.vim/plugged/coc.nvim"))
      " coc-marketplace {
        call coc#add_extension('coc-marketplace')
      " }

      " snippet {
        " install `coc-snippet`
        if isdirectory(expand("~/.vim/plugged/vim-snippets"))
          call coc#add_extension('coc-snippets')

          " Use <C-l> for trigger snippet expand.
          imap <C-l> <Plug>(coc-snippets-expand)

          " Use <C-j> for select text for visual placeholder of snippet.
          vmap <C-j> <Plug>(coc-snippets-select)

          " Use <C-j> for jump to next placeholder, it's default of coc.nvim
          let g:coc_snippet_next = '<c-j>'

          " Use <C-k> for jump to previous placeholder, it's default of coc.nvim
          let g:coc_snippet_prev = '<c-k>'

          " Use <C-j> for both expand and jump (make expand higher priority.)
          imap <C-j> <Plug>(coc-snippets-expand-jump)
        endif
      "}

      " if hidden is not set, TextEdit might fail.
      set hidden

      " Some servers have issues with backup files, see #649
      set nobackup
      set nowritebackup

      " Better display for messages
      set cmdheight=1

      " You will have bad experience for diagnostic messages when it's default 4000.
      set updatetime=300

      " don't give |ins-completion-menu| messages.
      set shortmess+=c

      " always show signcolumns
      set signcolumn=yes

      " Use tab for trigger completion with characters ahead and navigate.
      " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
      inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
      inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

      function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
      endfunction

      " Use <c-space> to trigger completion.
      inoremap <silent><expr> <c-space> coc#refresh()

      " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
      " Coc only does snippet and additional edit on confirm.
      inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
      " Or use `complete_info` if your vim support it, like:
      " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

      " Use `[g` and `]g` to navigate diagnostics
      nmap <silent> [g <Plug>(coc-diagnostic-prev)
      nmap <silent> ]g <Plug>(coc-diagnostic-next)

      " Remap keys for gotos
      nmap <silent> gd <Plug>(coc-definition)
      nmap <silent> gy <Plug>(coc-type-definition)
      nmap <silent> gi <Plug>(coc-implementation)
      nmap <silent> gr <Plug>(coc-references)

      " Use K to show documentation in preview window
      nnoremap <silent> K :call <SID>show_documentation()<CR>

      function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
          execute 'h '.expand('<cword>')
        else
          call CocAction('doHover')
        endif
      endfunction

      " Highlight symbol under cursor on CursorHold
      autocmd CursorHold * silent call CocActionAsync('highlight')

      " Remap for rename current word
      nmap <leader>rn <Plug>(coc-rename)

      " Remap for format selected region
      xmap <leader>f  <Plug>(coc-format-selected)
      nmap <leader>f  <Plug>(coc-format-selected)

      augroup mygroup
        autocmd!
        " Setup formatexpr specified filetype(s).
        autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        " Update signature help on jump placeholder
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
      augroup end

      " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
      xmap <leader>a  <Plug>(coc-codeaction-selected)
      nmap <leader>a  <Plug>(coc-codeaction-selected)

      " Remap for do codeAction of current line
      nmap <leader>ac  <Plug>(coc-codeaction)
      " Fix autofix problem of current line
      nmap <leader>qf  <Plug>(coc-fix-current)

      " Create mappings for function text object, requires document symbols feature of languageserver.
      xmap if <Plug>(coc-funcobj-i)
      xmap af <Plug>(coc-funcobj-a)
      omap if <Plug>(coc-funcobj-i)
      omap af <Plug>(coc-funcobj-a)

      " Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
      nmap <silent> <C-d> <Plug>(coc-range-select)
      xmap <silent> <C-d> <Plug>(coc-range-select)

      " Use `:Format` to format current buffer
      command! -nargs=0 Format :call CocAction('format')

      " Use `:Fold` to fold current buffer
      command! -nargs=? Fold :call     CocAction('fold', <f-args>)

      " use `:OR` for organize import of current buffer
      command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

      " Add status line support, for integration with other plugin, checkout `:h coc-status`
      set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

      " Using CocList
      " Show all diagnostics
      nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
      " Manage extensions
      nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
      " Show commands
      nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
      " Find symbol of current document
      nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
      " Search workspace symbols
      nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
      " Do default action for next item.
      nnoremap <silent> <space>j  :<C-u>CocNext<CR>
      " Do default action for previous item.
      nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
      " Resume latest coc list
      nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
    endif
  endif
" }

" Javascript {
  if count(g:tim_plugin_groups, 'javascript')
    " Coc install `coc-tsserver`, to support js autocomplete.
    if count(g:tim_plugin_groups, 'autocomplete')
      if isdirectory(expand("~/.vim/plugged/coc.nvim"))
        call coc#add_extension('coc-tsserver')
      endif
    endif
  endif
"}

" Vue {
  if count(g:tim_plugin_groups, 'vue')
    " Coc install `coc-vetur`, to support vue autocomplete.
    if count(g:tim_plugin_groups, 'autocomplete')
      if isdirectory(expand("~/.vim/plugged/coc.nvim"))
        call coc#add_extension('coc-vetur')
      endif
    endif
  endif
"}

" Css && Scss && Less {
  if count(g:tim_plugin_groups, 'css')
    " Coc install `coc-css`, to support css && scss && less autocomplete.
    if count(g:tim_plugin_groups, 'autocomplete')
      if isdirectory(expand("~/.vim/plugged/coc.nvim"))
        call coc#add_extension('coc-css')
      endif
    endif
  endif
"}

" Python {
  if count(g:tim_plugin_groups, 'python')
    " Coc install `coc-python`, to support python autocomplete.
    if count(g:tim_plugin_groups, 'autocomplete')
      if isdirectory(expand("~/.vim/plugged/coc.nvim"))
        call coc#add_extension('coc-python')
      endif
    endif
  endif
"}

" HTML {
  if count(g:tim_plugin_groups, 'html')
    " Coc install `coc-html` `coc-emmet`, to support html && handlebars && razor autocomplete.
    if count(g:tim_plugin_groups, 'autocomplete')
      if isdirectory(expand("~/.vim/plugged/coc.nvim"))
        call coc#add_extension('coc-html')
        call coc#add_extension('coc-emmet')
      endif
    endif
  endif
"}

" JSON {
  if count(g:tim_plugin_groups, 'json')
    if count(g:tim_plugin_groups, 'autocomplete')
      if isdirectory(expand("~/.vim/plugged/coc.nvim"))
        call coc#add_extension('coc-json')
      endif
    endif
  endif
"}

" Syntastic {
  if count(g:tim_plugin_groups, 'syntastic')
      if isdirectory(expand("~/.vim/plugged/ale")) && count(g:tim_plugin_groups, 'ale')
        let g:ale_lint_on_text_changed = 'normal'
        let g:ale_lint_delay = 200
        let g:ale_lint_on_insert_leave = 1
        let g:ale_echo_msg_format = '[%linter%] %code: %%s'
        let g:ale_linters_explicit = 1  "精确使用自配置的linter, 屏蔽 ale 默认linter
        " eslint 需要配置 .eslintrc.json
        let g:ale_linters = {
              \ 'javascript': ['eslint'], 
              \ 'css': ['csslint'],
              \ 'java': ['javac']
              \}

        let g:ale_sign_error = "\ue009\ue009"
        hi! clear SpellBad
        hi! clear SpellCap
        hi! clear SpellRare
        hi! SpellBad gui=undercurl guisp=red
        hi! SpellCap gui=undercurl guisp=blue
        hi! SpellRare gui=undercurl guisp=magenta

        " prettier 需要配置 .prettierrc.json , 改为使用 eslint
        let g:ale_fixers = {
              \ 'javascript': ['eslint'],
              \ 'css': ['eslint']
              \}
        let g:ale_fix_on_save = 1
      endif

    if count(g:tim_plugin_groups, 'autocomplete')
      if isdirectory(expand("~/.vim/plugged/coc.nvim"))
        autocmd User CocNvimInit call coc#add_extension('coc-eslint')
        autocmd User CocNvimInit call coc#config('eslint.autoFixOnSave','true')
      endif
    endif
  endif
"}

" UI {
    if count(g:tim_plugin_groups, 'UI')
      if g:tim_theme == 'molokai' && isdirectory(expand("~/.vim/plugged/molokai"))
        let g:molokai_original = 1
      endif

      if g:tim_theme == 'solarized' && isdirectory(expand("~/.vim/plugged/vim-colors-solarized"))
        let g:solarized_termcolors=256
        let g:solarized_termtrans=1
        let g:solarized_contrast="normal"
        let g:solarized_visibility="normal"
      endif

      execute "color " . g:tim_theme
    endif
" }

" Editing {
  if count(g:tim_plugin_groups, 'autopair')
      if isdirectory(expand("~/.vim/plugged/auto-pairs"))
          let g:AutoPairs = {'(':')', '[':']', '{':'}', "'":"'", '"':'"', '`':'`'}
      endif
      if isdirectory(expand("~/.vim/plugged/rainbow"))
          let g:rainbow_active = 1
      endif
      if isdirectory(expand("~/.vim/plugged/vim-easymotion"))
          map <Leader> <Plug>(easymotion-prefix)
      endif
  endif
" }
